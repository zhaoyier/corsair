#!/usr/bin/env node
const fe = require("fs-extra");
const path = require("path");
const chalk = require("chalk");

const sourceEntry = path.resolve(__dirname, "../src/views");
const distPath = path.resolve(__dirname, "../src/entries");

function renderEntry(file) {
	const { modulePath, hideMenu, hidePadding } = file;
	return `
import App from "${modulePath}";
import Mount from "../components/Mount";

Mount(App, ${hideMenu}, ${hidePadding});
if (module.hot) {
	module.hot.accept("${modulePath}", () => {
		Mount(App, ${hideMenu}, ${hidePadding});
	});
}
`;
}


const hideMenuMap = {
	login: true,
	setPage: true
};

const hidePaddingMap = {
	login: true,
	d2d: true
};

function removeHiddenFile(file) {
	return file[0] !== ".";
}

function removeEmptyFolder(file) {
	const indexFile = path.join(sourceEntry, file, "index.tsx");
	const exist = fe.existsSync(indexFile);
	if (!exist) {
		console.warn(chalk.yellow(`${indexFile} not found, this entry will be ignore.`));
	}
	return exist;
}

async function readEntry() {
	const entries = await fe.readdir(sourceEntry);
	const allFiles = [
		...entries
			.filter(removeHiddenFile)
			.filter(removeEmptyFolder)
			.map(item => ({
				name: item,
				modulePath: `../views/${item}`,
				hideMenu: hideMenuMap[item],
				hidePadding: hidePaddingMap[item]
			}))
	];

	fe.removeSync(distPath);
	fe.ensureDirSync(distPath);

	Promise.all(
		allFiles.map(file =>
			fe.writeFile(
				path.join(distPath, file.name + ".tsx"),
				renderEntry(file),
				{ encoding: "utf8" }
			)
		)
	).catch(e => {
		console.log(e);
	});
}

readEntry();
