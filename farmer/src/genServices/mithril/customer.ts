/**
 * This file is auto-generated by protobufgen
 * Don't change manually
 */

import { AftersaleOrderType as OmsAftersaleOrderType } from "../oms/common";
import { Result as MithrilResult, DeliveryType as MithrilDeliveryType, StationInfo as MithrilStationInfo, StationDetail as MithrilStationDetail, Region as MithrilRegion, PriceType as MithrilPriceType, SimpleStationInfo as MithrilSimpleStationInfo, ShortRegionInfo as MithrilShortRegionInfo } from "../mithril/common";
import { DeliveryType as CommonDeliveryType } from "../common/deliverytype";
import webapi from "../webapi";

export enum ShipmentStatus {
	ShipmentStatusAll = "ShipmentStatusAll",
	ShipmentStatusAwaitingArrangeDelivery = "ShipmentStatusAwaitingArrangeDelivery",
	ShipmentStatusAwaitingAcknowledge = "ShipmentStatusAwaitingAcknowledge",
}


export enum ShipmentAction {
	ShipmentActionNone = "ShipmentActionNone",
	ShipmentActionArrangeDelivery = "ShipmentActionArrangeDelivery",
	ShipmentActionEditDelivery = "ShipmentActionEditDelivery",
	ShipmentActionCancelDelivery = "ShipmentActionCancelDelivery",
	ShipmentActionConfirmDelivery = "ShipmentActionConfirmDelivery",
	ShipmentActionOtherItems = "ShipmentActionOtherItems",
	ShipmentSplit = "ShipmentSplit",
}


export enum ServiceType {
	ServiceTypeInvalid = "ServiceTypeInvalid",
	ServiceTypeB4m = "ServiceTypeB4m",
	ServiceTypeS4m = "ServiceTypeS4m",
	ServiceTypePrime = "ServiceTypePrime",
	ServiceTypeEzbuy = "ServiceTypeEzbuy",
}


export enum ParcelAction {
	ParcelActionNone = "ParcelActionNone",
	ParcelActionViewLogistoic = "ParcelActionViewLogistoic",
}


export enum CompletedStatus {
	CompletedStatusAllParcel = "CompletedStatusAllParcel",
	CompletedStatusToReviewService = "CompletedStatusToReviewService",
}


export enum LogisticIconType {
	LogisticIconTypeOthers = "LogisticIconTypeOthers",
	LogisticIconTypeSubmitOrder = "LogisticIconTypeSubmitOrder",
	LogisticIconTypeCurrentStatus = "LogisticIconTypeCurrentStatus",
	LogisticIconTypeArrivedWarehouse = "LogisticIconTypeArrivedWarehouse",
	LogisticIconTypeShipped = "LogisticIconTypeShipped",
	LogisticIconTypeCompleted = "LogisticIconTypeCompleted",
}



export interface FixOrderPoDateReq {
	orderMdate?: {[key: string]: string};
}

export interface FixOrderPoDateResp {
	orderIds?: number[];
}

export interface RelatedOrderItem {
	/**
	 * @pattern ^\d+$
	 */
	relatedOrderId?: string;
	/**
	 * @pattern ^\d+$
	 */
	relatedOrderItemId?: string;
	aftersaleOrderType?: OmsAftersaleOrderType;
	/**
	 * @pattern ^\d+$
	 */
	skuStatusId?: string;
}

export interface FindGeoReq {
	/**
	 * @pattern ^\d+$
	 */
	region_id?: string;
	post_code?: string;
}

export interface FindGeoResp {
	res?: MithrilResult;
	/**
	 * @minimum 0
	 */
	longitude?: number;
	/**
	 * @minimum 0
	 */
	latitude?: number;
	region_code?: string;
}

export interface GetStationByGeoReq {
	/**
	 * @minimum 0
	 */
	longitude?: number;
	/**
	 * @minimum 0
	 */
	latitude?: number;
	/**
	 * @minimum 0
	 */
	package_weight?: number;
	delivery_type_id?: MithrilDeliveryType;
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	offset?: number;
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	limit?: number;
	pkgNo?: string;
}

export interface GetStationResp {
	res?: MithrilResult;
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	total?: number;
	station_info?: MithrilStationInfo[];
	/**
	 * @minimum 0
	 */
	package_weight?: number;
	/**
	 * @minimum 0
	 */
	longtitude?: number;
	/**
	 * @minimum 0
	 */
	latitude?: number;
	unAvailable?: boolean;
	unAvailableReason?: boolean;
}

export interface GetStationDetailsResp {
	res?: MithrilResult;
	station_detail?: MithrilStationDetail;
	/**
	 * @minimum 0
	 */
	longitude?: number;
	/**
	 * @minimum 0
	 */
	latitude?: number;
}

export interface GetStationDetailReq {
	/**
	 * @pattern ^\d+$
	 */
	station_id?: string;
}

export interface GetChildRegionsReq {
	/**
	 * @pattern ^\d+$
	 */
	region_id?: string;
	region_code?: string;
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	offset?: number;
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	limit?: number;
}

export interface GetChildRegionsResp {
	res?: MithrilResult;
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	total?: number;
	items?: MithrilRegion[];
}

export interface GetRegionReq {
	/**
	 * @pattern ^\d+$
	 */
	region_id?: string;
}

export interface GetRegionResp {
	result?: MithrilResult;
	data?: MithrilRegion;
}

export interface GetStationByPostcodeReq {
	post_code?: string;
	delivery_type_id?: MithrilDeliveryType;
	/**
	 * @minimum 0
	 */
	package_weight?: number;
	/**
	 * @pattern ^\d+$
	 */
	region_id?: string;
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	offset?: number;
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	limit?: number;
	pkgNo?: string;
}

export interface GetStationByRegionCodeReq {
	/**
	 * @pattern ^\d+$
	 */
	region_id?: string;
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	limit?: number;
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	offset?: number;
	price_type?: MithrilPriceType;
	/**
	 * @minimum 0
	 */
	package_weight?: number;
	pkgNo?: string;
}

export interface GetMapStationsByGeoReq {
	/**
	 * @minimum 0
	 */
	latitude?: number;
	/**
	 * @minimum 0
	 */
	longitude?: number;
	/**
	 * @minimum 0
	 */
	package_weight?: number;
	delivery_type_id?: MithrilDeliveryType;
	pkgNo?: string;
}

export interface GetMapStationsByGeoResp {
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	total?: number;
	station_info?: MithrilSimpleStationInfo[];
	/**
	 * @minimum 0
	 */
	longtitude?: number;
	/**
	 * @minimum 0
	 */
	latitude?: number;
	res?: MithrilResult;
}

export interface GetMapStationsByRegionReq {
	/**
	 * @pattern ^\d+$
	 */
	region_id?: string;
	/**
	 * @minimum 0
	 */
	package_weight?: number;
	price_type?: MithrilPriceType;
	pkgNo?: string;
}

export interface GetMapStationsByRegionResp {
	res?: MithrilResult;
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	total?: number;
	station_info?: MithrilSimpleStationInfo[];
}

export interface GetStationInfoReq {
	/**
	 * @pattern ^\d+$
	 */
	station_id?: string;
	/**
	 * @minimum 0
	 */
	package_weight?: number;
	/**
	 * @minimum 0
	 */
	latitude?: number;
	/**
	 * @minimum 0
	 */
	longitude?: number;
}

export interface GetStationInfoResp {
	res?: MithrilResult;
	station_info?: MithrilStationInfo;
}

export interface ValidateCutOffTimeReq {
	timings?: ValidateCutOffTime[];
}

export interface ValidateCutOffTimeResp {
	timings?: ValidateCutOffTime[];
	hasinvalid?: boolean;
}

export interface ValidateCutOffTime {
	/**
	 * @pattern ^\d+$
	 */
	current_time?: string;
	/**
	 * @pattern ^\d+$
	 */
	arrange_time?: string;
	/**
	 * @minimum 0
	 * @TJS-type integer
	 */
	period_time_id?: number;
}

export interface GetRegionTreeReq {
	catalogCode?: string;
}

export interface GetRegionTreeResp {
	res?: MithrilResult;
	regionInfos?: MithrilShortRegionInfo[];
}

export interface GetRegionId2RegionNameReq {
	catalogCode?: string;
}

export interface GetRegionId2RegionNameResp {
	regionId2RegionName?: {[key: string]: string};
}

export interface GetBlueExCityReq {

}

export interface GetBlueExCityResp {
	cityMcode?: {[key: string]: string};
}

export interface ConsigneeBasicInfo {
	name?: string;
	phone?: string;
}

export interface ConsigneeHomeAddressInfo {
	address?: string;
	/**
	 * @pattern ^\d+$
	 */
	deliveryDate?: string;
	periodName?: string;
}

export interface RPCGetCompletedShipListReq {
	/**
	 * @pattern ^\d+$
	 */
	customerId?: string;
	/**
	 * @pattern ^\d+$
	 */
	offset?: string;
	/**
	 * @pattern ^\d+$
	 */
	limit?: string;
	completedStatus?: CompletedStatus;
	isArchiveData?: boolean;
}

export interface RPCGetCompletedShipListResp {
	parcelInfos?: ParcelInfo[];
}

export interface RPCGetToReceiveShipmentListReq {
	/**
	 * @pattern ^\d+$
	 */
	customerId?: string;
	/**
	 * @pattern ^\d+$
	 */
	offset?: string;
	/**
	 * @pattern ^\d+$
	 */
	limit?: string;
	shipmentAction?: ShipmentAction;
}

export interface RPCGetToReceiveShipmentListResp {
	shipmentInfos?: ShipmentItem[];
}

export interface ShipmentItem {
	/**
	 * @pattern ^\d+$
	 */
	orderId?: string;
	/**
	 * @pattern ^\d+$
	 */
	shipmentId?: string;
	isAllParcelArrive?: boolean;
	parcelInfos?: ParcelInfo[];
	shipmentActions?: ShipmentAction[];
}

export interface ParcelInfo {
	serviceType?: ServiceType;
	/**
	 * @pattern ^\d+$
	 */
	orderId?: string;
	/**
	 * @pattern ^\d+$
	 */
	shipmentId?: string;
	parcelNumber?: string;
	/**
	 * @pattern ^\d+$
	 */
	parcelStatusId?: string;
	/**
	 * @pattern ^\d+$
	 */
	parcelStatusUpdateDate?: string;
	isServiceReviewed?: boolean;
	isParcelArrived?: boolean;
	orderItems?: OrderItemSkuInfo[];
	orderEtaStart?: string;
	orderEtaEnd?: string;
	deliveryEta?: string;
	parcelAction?: ParcelAction[];
	packageCode?: string;
	s4mOrderItems?: S4mOrderItemSkuInfo[];
	/**
	 * @pattern ^\d+$
	 */
	arrivedOnOverseasWarehouseTime?: string;
	deliveryType?: CommonDeliveryType;
	isFriendsDeal?: boolean;
	isFlashSale?: boolean;
	aftersaleOrderType?: OmsAftersaleOrderType;
	/**
	 * @pattern ^\d+$
	 */
	sellerDeliveryType?: string;
	trackingCompanyName?: string;
	trackingNumber?: string;
}

export interface OrderItemSkuInfo {
	serviceType?: ServiceType;
	/**
	 * @pattern ^\d+$
	 */
	orderId?: string;
	/**
	 * @pattern ^\d+$
	 */
	orderItemId?: string;
	parcelNumber?: string;
	/**
	 * @pattern ^\d+$
	 */
	orderItemStatusId?: string;
	isReviewedSku?: boolean;
	/**
	 * @pattern ^\d+$
	 */
	gpid?: string;
	skuId?: string;
	/**
	 * @pattern ^\d+$
	 */
	gpidVersion?: string;
	/**
	 * @pattern ^\d+$
	 */
	qty?: string;
	/**
	 * @pattern ^\d+$
	 */
	unitPrice?: string;
	/**
	 * @pattern ^\d+$
	 */
	actualWeight?: string;
	/**
	 * @pattern ^\d+$
	 */
	chargeWeight?: string;
	/**
	 * @pattern ^\d+$
	 */
	weighingWeight?: string;
	/**
	 * @pattern ^\d+$
	 */
	shipmentTypeId?: string;
	orderEtaStart?: string;
	orderEtaEnd?: string;
	isFriendsDeal?: boolean;
	/**
	 * @pattern ^\d+$
	 */
	orderDate?: string;
	isFlashSale?: boolean;
	aftersaleOrderType?: OmsAftersaleOrderType;
	relatedOrderItems?: RelatedOrderItem[];
}

export interface S4mOrderItemSkuInfo {
	serviceType?: ServiceType;
	/**
	 * @pattern ^\d+$
	 */
	oldOrderId?: string;
	parcelNumber?: string;
	productUrl?: string;
	productName?: string;
	skuInfo?: string;
	/**
	 * @pattern ^\d+$
	 */
	unitPrice?: string;
	/**
	 * @pattern ^\d+$
	 */
	skuCount?: string;
	orderNo?: string;
	/**
	 * @minimum 0
	 */
	weight?: number;
	orderDate?: string;
	updateDate?: string;
	warehouseCode?: string;
	/**
	 * @pattern ^\d+$
	 */
	shipmentTypeId?: string;
	/**
	 * @pattern ^\d+$
	 */
	qty?: string;
	image?: string;
	/**
	 * @pattern ^\d+$
	 */
	s4mOrderStatusId?: string;
	s4mOrderStatusCode?: string;
}

export interface RPCGetListCountReq {
	/**
	 * @pattern ^\d+$
	 */
	customerId?: string;
}

export interface RPCGetListCountResp {
	/**
	 * @pattern ^\d+$
	 */
	toShipCount?: string;
	/**
	 * @pattern ^\d+$
	 */
	toReceiveShipmentCount?: string;
	/**
	 * @pattern ^\d+$
	 */
	SubmitToShipCount?: string;
	/**
	 * @pattern ^\d+$
	 */
	awaitingArrangeDeliveryCount?: string;
	/**
	 * @pattern ^\d+$
	 */
	awaitingConfirmCount?: string;
}

export interface RPCGetLogisticsInfoByParcelNumberReq {
	parcelNumber?: string;
}

export interface RPCGetLogisticsInfoByParcelNumberResp {
	logisticsInfos?: LogisticsInfo[];
}

export interface LogisticsInfo {
	updateDate?: string;
	logisticsInfo?: string;
	/**
	 * @pattern ^\d+$
	 */
	parcelStatusId?: string;
	isThirdParty?: boolean;
	extraInfo?: ExtraLogisticInfo;
}

export interface ExtraLogisticInfo {
	iconType?: LogisticIconType;
}

export interface RPCGetParcelDetailReq {
	parcelNumber?: string;
}

export interface RPCGetParcelDetailResp {
	info?: ParcelDetailInfo;
}

export interface ParcelDetailInfo {
	serviceType?: ServiceType;
	/**
	 * @pattern ^\d+$
	 */
	orderId?: string;
	/**
	 * @pattern ^\d+$
	 */
	shipmentId?: string;
	parcelNumber?: string;
	/**
	 * @pattern ^\d+$
	 */
	orderDate?: string;
	/**
	 * @pattern ^\d+$
	 */
	parcelStatusId?: string;
	/**
	 * @pattern ^\d+$
	 */
	parcelStatusUpdateDate?: string;
	orderEtaStart?: string;
	orderEtaEnd?: string;
	deliveryEta?: string;
	/**
	 * @pattern ^\d+$
	 */
	actualWeight?: string;
	/**
	 * @pattern ^\d+$
	 */
	chargeWeight?: string;
	/**
	 * @pattern ^\d+$
	 */
	weighingWeight?: string;
	orderItems?: OrderItemSkuInfo[];
	isParcelArrived?: boolean;
	/**
	 * @pattern ^\d+$
	 */
	warehouseId?: string;
	shipmentTypeName?: string;
	/**
	 * @pattern ^\d+$
	 */
	shipmentTypeId?: string;
	parcelAction?: ParcelAction[];
	s4mOrderItems?: S4mOrderItemSkuInfo[];
	shipmentActions?: ShipmentAction[];
	/**
	 * @pattern ^\d+$
	 */
	deliveryDate?: string;
	/**
	 * @pattern ^\d+$
	 */
	pickupPeriodId?: string;
	/**
	 * @pattern ^\d+$
	 */
	arrivedOnOverseasWarehouseTime?: string;
	isFriendsDeal?: boolean;
	deliveryType?: CommonDeliveryType;
	isFlashSale?: boolean;
	aftersaleOrderType?: OmsAftersaleOrderType;
	/**
	 * @pattern ^\d+$
	 */
	deliveryEtaInt?: string;
	/**
	 * @pattern ^\d+$
	 */
	sellerDeliveryType?: string;
	trackingCompanyName?: string;
	trackingNumber?: string;
}

export interface RPCGetParcelListByOrderIdReq {
	/**
	 * @pattern ^\d+$
	 */
	orderId?: string;
	/**
	 * @pattern ^\d+$
	 */
	offset?: string;
	/**
	 * @pattern ^\d+$
	 */
	limit?: string;
}

export interface RPCGetParcelListByOrderIdResp {
	/**
	 * @pattern ^\d+$
	 */
	orderId?: string;
	/**
	 * @pattern ^\d+$
	 */
	shipmentId?: string;
	isAllParcelArrive?: boolean;
	parcelInfos?: ParcelInfo[];
}

export interface RPCGetUnpackedOrderItemListByShipmentIdReq {
	/**
	 * @pattern ^\d+$
	 */
	orderId?: string;
	/**
	 * @pattern ^\d+$
	 */
	shipmentId?: string;
	/**
	 * @pattern ^\d+$
	 */
	offset?: string;
	/**
	 * @pattern ^\d+$
	 */
	limit?: string;
}

export interface RPCGetUnpackedOrderItemListByShipmentIdResp {
	orderItems?: OrderItemSkuInfo[];
}

export interface RPCAllStationIsAvailableReq {
	/**
	 * @pattern ^\d+$
	 */
	regionId?: string;
	/**
	 * @minimum 0
	 */
	package_weight?: number;
	delivery_type_id?: MithrilDeliveryType;
}

export interface RPCAllStationIsAvailableResp {
	isAllNoAvailable?: boolean;
	message?: string;
}

export interface RPCAllSelfCollectionFreeReq {
	/**
	 * @pattern ^\d+$
	 */
	regionId?: string;
}

export interface RPCAllSelfCollectionFreeResp {
	allSelfCollectionFree?: boolean;
}

export interface BatchGetPracleInfoReq {
	parcelCodes?: string[];
}



export function FindGeo(payload: Partial<FindGeoReq>) {
	return webapi<FindGeoResp>("mithril.Customer/FindGeo", payload);
}

export function GetStationByGeo(payload: Partial<GetStationByGeoReq>) {
	return webapi<GetStationResp>("mithril.Customer/GetStationByGeo", payload);
}

export function GetStationByPostcode(payload: Partial<GetStationByPostcodeReq>) {
	return webapi<GetStationResp>("mithril.Customer/GetStationByPostcode", payload);
}

export function GetChildRegion(payload: Partial<GetChildRegionsReq>) {
	return webapi<GetChildRegionsResp>("mithril.Customer/GetChildRegion", payload);
}

export function GetStationByRegion(payload: Partial<GetStationByRegionCodeReq>) {
	return webapi<GetStationResp>("mithril.Customer/GetStationByRegion", payload);
}

export function GetStationDetails(payload: Partial<GetStationDetailReq>) {
	return webapi<GetStationDetailsResp>("mithril.Customer/GetStationDetails", payload);
}

export function GetMapStationsByGeo(payload: Partial<GetMapStationsByGeoReq>) {
	return webapi<GetMapStationsByGeoResp>("mithril.Customer/GetMapStationsByGeo", payload);
}

export function GetMapStationsByRegion(payload: Partial<GetMapStationsByRegionReq>) {
	return webapi<GetMapStationsByRegionResp>("mithril.Customer/GetMapStationsByRegion", payload);
}

export function GetStationInfo(payload: Partial<GetStationInfoReq>) {
	return webapi<GetStationInfoResp>("mithril.Customer/GetStationInfo", payload);
}

export function ValidateCutOffTime(payload: Partial<ValidateCutOffTimeReq>) {
	return webapi<ValidateCutOffTimeResp>("mithril.Customer/ValidateCutOffTime", payload);
}

export function GetRegionTree(payload: Partial<GetRegionTreeReq>) {
	return webapi<GetRegionTreeResp>("mithril.Customer/GetRegionTree", payload);
}

export function GetRegionId2RegionName(payload: Partial<GetRegionId2RegionNameReq>) {
	return webapi<GetRegionId2RegionNameResp>("mithril.Customer/GetRegionId2RegionName", payload);
}

export function GetBlueExCity(payload: Partial<GetBlueExCityReq>) {
	return webapi<GetBlueExCityResp>("mithril.Customer/GetBlueExCity", payload);
}

export function RPCGetCompletedShipList(payload: Partial<RPCGetCompletedShipListReq>) {
	return webapi<RPCGetCompletedShipListResp>("mithril.Customer/RPCGetCompletedShipList", payload);
}

export function RPCGetListCount(payload: Partial<RPCGetListCountReq>) {
	return webapi<RPCGetListCountResp>("mithril.Customer/RPCGetListCount", payload);
}

export function RPCGetLogisticsInfoByParcelNumber(payload: Partial<RPCGetLogisticsInfoByParcelNumberReq>) {
	return webapi<RPCGetLogisticsInfoByParcelNumberResp>("mithril.Customer/RPCGetLogisticsInfoByParcelNumber", payload);
}

export function RPCGetParcelDetail(payload: Partial<RPCGetParcelDetailReq>) {
	return webapi<RPCGetParcelDetailResp>("mithril.Customer/RPCGetParcelDetail", payload);
}

export function RPCGetLogisticsInfoByParcelNumberTMS(payload: Partial<RPCGetLogisticsInfoByParcelNumberReq>) {
	return webapi<RPCGetLogisticsInfoByParcelNumberResp>("mithril.Customer/RPCGetLogisticsInfoByParcelNumberTMS", payload);
}

export function RPCGetToReceiveShipmentList(payload: Partial<RPCGetToReceiveShipmentListReq>) {
	return webapi<RPCGetToReceiveShipmentListResp>("mithril.Customer/RPCGetToReceiveShipmentList", payload);
}

export function RPCGetParcelListByOrderId(payload: Partial<RPCGetParcelListByOrderIdReq>) {
	return webapi<RPCGetParcelListByOrderIdResp>("mithril.Customer/RPCGetParcelListByOrderId", payload);
}

export function RPCGetUnpackedOrderItemListByShipmentId(payload: Partial<RPCGetUnpackedOrderItemListByShipmentIdReq>) {
	return webapi<RPCGetUnpackedOrderItemListByShipmentIdResp>("mithril.Customer/RPCGetUnpackedOrderItemListByShipmentId", payload);
}

export function RPCAllStationIsAvailable(payload: Partial<RPCAllStationIsAvailableReq>) {
	return webapi<RPCAllStationIsAvailableResp>("mithril.Customer/RPCAllStationIsAvailable", payload);
}

export function RPCAllSelfCollectionFree(payload: Partial<RPCAllSelfCollectionFreeReq>) {
	return webapi<RPCAllSelfCollectionFreeResp>("mithril.Customer/RPCAllSelfCollectionFree", payload);
}

export function FixOrderPoDate(payload: Partial<FixOrderPoDateReq>) {
	return webapi<FixOrderPoDateResp>("mithril.Customer/FixOrderPoDate", payload);
}


export default {
	FindGeo,
	GetStationByGeo,
	GetStationByPostcode,
	GetChildRegion,
	GetStationByRegion,
	GetStationDetails,
	GetMapStationsByGeo,
	GetMapStationsByRegion,
	GetStationInfo,
	ValidateCutOffTime,
	GetRegionTree,
	GetRegionId2RegionName,
	GetBlueExCity,
	RPCGetCompletedShipList,
	RPCGetListCount,
	RPCGetLogisticsInfoByParcelNumber,
	RPCGetParcelDetail,
	RPCGetLogisticsInfoByParcelNumberTMS,
	RPCGetToReceiveShipmentList,
	RPCGetParcelListByOrderId,
	RPCGetUnpackedOrderItemListByShipmentId,
	RPCAllStationIsAvailable,
	RPCAllSelfCollectionFree,
	FixOrderPoDate,
};