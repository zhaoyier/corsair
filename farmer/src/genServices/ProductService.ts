/**
 * This file is auto-generated by tgen
 * Don't change manually
 */
import webapi from "./webapi";
import * as Common from "./CommonService";


export enum ProductVideoOpenType {
	DEFAULT = 1,
	UNKNOWN = 0,
	WEBVIEW = 2,
}
export enum TFriendsDealGroupStatus {
	Expired = 4,
	Joinable = 1,
	Other = 0,
	StaffUnPay = 5,
	StartNew = 6,
	Succeed = 2,
	WaitingForOthers = 3,
}


export interface SearchFilter {
	name: string;
	fields: SearchFilterField[];
	emphasized: boolean;
}
export interface SearchFilterCond {
	filterName: string;
	fieldName: string;
}
export interface SearchFilterField {
	name: string;
	productCount: number;
}
export interface SearchResult {
	products: TSimpleProduct[];
	sorts: string[];
	filters: SearchFilter[];
	sortOptions: TSortOption[];
}
export interface SearchSortCond {
	sort: string;
	isDesc: boolean;
}
export interface TCat {
	dcid: number;
	dcname: string;
}
export interface TCharacteristic {
	propkey: string;
	actualValue: string;
	remark: string;
	imageUrl: string;
	isSelected: boolean;
}
export interface TCharacteristicGroup {
	name: string;
	characteristics: TCharacteristic[];
}
export interface TFlashSalesInfo {
	flashSalesAvailable: boolean;
	beginTimeSpan: number;
	endTimeSpan: number;
	flashSalesPrice: number;
	stock: number;
	settingId: string;
}
export interface TFreeShippingInfo {
	freeShippingAvailable: boolean;
	url: string;
	name: string;
}
export interface TFriendsDealCustomerInfo {
	customerId: number;
	imageURL: string;
	name: string;
	isCaptain: boolean;
}
export interface TFriendsDealGroupInfo {
	customers: TFriendsDealCustomerInfo[];
	groupEndTimeSpan: number;
	status: TFriendsDealGroupStatus;
	statusMessage: string;
}
export interface TFriendsDealInfo {
	friendsDealAvailable: boolean;
	beginTimeSpan: number;
	endTimeSpan: number;
	price: string;
	originalPrice: string;
	stock: number;
	soldStock: number;
	usableStock: number;
	minUnit: number;
	buyLimit: number;
	shippingMethodeDescription: string;
	friendsDealGroupInfo?: TFriendsDealGroupInfo;
	eventId?: string;
	shareableItem?: Common.TCommonItem;
	singleMemberSkus?: TSku[];
	singleMemberPrice?: number;
	supportSingleGroup: boolean;
	singleMemberOriginPrice?: number;
}
export interface TGroupBuyInfo {
	groupbuyAvailable: boolean;
	beginTimeSpan: number;
	endTimeSpan: number;
	totalStock: number;
	soldStock: number;
	usableStock: number;
	info: TGroupBuyItemsInfo[];
	deposit: string;
}
export interface TGroupBuyItemsInfo {
	priority: number;
	localPrice: string;
	minQty: number;
	percent: number;
}
export interface TJoinPrimeInfo {
	url: string;
	title: string;
	params: string[];
}
export interface TListSearchCond {
	categoryId: number;
	keyword?: string;
	actId?: string;
	filters?: SearchFilterCond[];
	sort?: SearchSortCond;
}
export interface TPremium {
	available: boolean;
	bannerUrl: string;
}
export interface TProduct {
	cid?: number;
	vendorName: string;
	productName: string;
	unitPrice: number;
	shippingFee: number;
	productUrl: string;
	productImage: string;
	originCode: string;
	shopName: string;
	location: string;
	aroundwWarehouse: string;
	isShippingFee: boolean;
	favoritesItemId: number;
	favoriteCatId: number;
	specialHandlingFeeMessage: string;
	specialHandlingFeePercent: number;
	propertyNames?: string[];
	shippingFees: TShippingFee[];
	descriptionImages?: string[];
	characteristicGroups?: TCharacteristicGroup[];
	skus?: TSku[];
	itemImgs?: string[];
	isEZBuy?: boolean;
	priceSymbol: string;
	localUnitPrice: string;
	localShipmentFee: number;
	errMsg?: string;
	minUnitPrice: number;
	maxUnitPrice: number;
}
export interface TProductBanner {
	img: string;
	link: string;
	text: string;
}
export interface TProductDiscountInfo {
	desc: string;
	priceDesc: string;
	price: string;
	imgUrl: string;
}
export interface TProductExtension {
	cid?: number;
	vendorName: string;
	productName: string;
	unitPrice: number;
	shippingFee: number;
	productUrl: string;
	productImage: string;
	originCode: string;
	shopName: string;
	location: string;
	aroundwWarehouse: string;
	isShippingFee: boolean;
	favoritesItemId: number;
	favoriteCatId: number;
	specialHandlingFeeMessage: string;
	specialHandlingFeePercent: number;
	propertyNames?: string[];
	shippingFees: TShippingFee[];
	descriptionImages?: string[];
	characteristicGroups?: TCharacteristicGroup[];
	skus?: TSku[];
	itemImgs?: string[];
	isEZBuy?: boolean;
	priceSymbol: string;
	localUnitPrice: string;
	localShipmentFee: number;
	errMsg?: string;
	eta?: string;
	displayShippingIcon?: boolean;
	altProductName?: string;
	altCharacteristicGroups?: TCharacteristicGroup[];
	primeAvailable: boolean;
	isShippedBySea: boolean;
	isContainGSTFee: boolean;
	flashSalesInfo: TFlashSalesInfo;
	originalUnitPrice: number;
	originalLocalUnitPrice: string;
	discountRate: string;
	isCashOffProduct: boolean;
	groupbuyInfo?: TGroupBuyInfo;
	shareUrl?: string;
	productGroupName?: string;
	productGroupURL?: string;
	cashOffCategoryName?: string;
	defaultShippingName?: string;
	defaultShippingFee?: string;
	friendsDealInfo?: TFriendsDealInfo;
	rawImage?: string;
	productStock?: number;
	exchangeRate: number;
	gpid: number;
	freeShippingInfo: TFreeShippingInfo;
	primeEta?: string;
	ezbuyEta?: string;
	notice: string;
	htmlStr: string;
	sellerInfo: TSellerInfo;
	originCountry?: string;
	originInfo?: string;
	selectedSkuId: string;
	joinPrime?: TJoinPrimeInfo;
	premium?: TPremium;
	brand: string;
	category: TCat[];
	titleIcons: Common.TTitleIcon[];
	sellerBanner: string;
	ruleTable: Common.TTable;
	banner: TProductBanner;
	disableRemark: boolean;
	limiterStage?: string;
	discountInfo?: TProductDiscountInfo;
	localShippingFee: number;
	minLocalUnitPrice: number;
	maxLocalUnitPrice: number;
	tag: TProductTag;
	videos?: TVideo[];
	originProductUrl: string;
}
export interface TProductReviewCount {
	all: number;
	hasPhoto: number;
}
export interface TProductReviewDetail {
	id: number;
	productUrl: string;
	userId: number;
	rating: number;
	helpfulCount?: number;
	comment: string;
	pictures?: string;
	setHelpful: boolean;
	nickName: string;
	headPortraits: string;
	sku?: string;
	createDate: string;
}
export interface TProductTag {
	text: string;
	color: string;
	img: string;
}
export interface TProductUserInfo {
	customerId: number;
	isPrime: boolean;
}
export interface TSellerInfo {
	sellerName: string;
	sellerCopy: string;
	sellerProductUrl: string;
}
export interface TShippingFee {
	warehouse: string;
	fee: number;
	localFee: number;
}
export interface TSimpleProduct {
	productName: string;
	productUrl: string;
	productImage: string;
	originCode: string;
	isEZBuy: boolean;
	localUnitPrice: string;
	originalLocalUnitPrice: string;
	discountRate: string;
	isCashOffProduct: boolean;
	cashOffColor?: string;
	originCountry?: string;
	gpid: number;
	isPrime: boolean;
	isFreeShipping: boolean;
	originalProductName: string;
	mncashoffImg: string;
	icon: Common.TIcon;
	titleIcons: Common.TTitleIcon[];
	discountInfo?: TProductDiscountInfo;
}
export interface TSku {
	price: string;
	properties: string;
	propertiesName: string;
	quantity: number;
	skuId: number;
	skuSpecId: number;
	status: string;
	withHoldQuantity: number;
	originalPrice: number;
	skuUrl: string;
	imgs: string[];
	localPrice: string;
	exchange: number;
}
export interface TSortOption {
	code: string;
	name: string;
	descTitle?: string;
	ascTitle?: string;
}
export interface TVideo {
	url: string;
	title: string;
	openType: ProductVideoOpenType;
	mimeType: string;
}


export function GetFriendsDealProductDetail(productUrl: string, eventId: string): Promise<TProductExtension> {
	return webapi<TProductExtension>("Product.GetFriendsDealProductDetail", { productUrl, eventId });
}

export function GetFriendsDealProductGroupDetail(groupId: string): Promise<TProductExtension> {
	return webapi<TProductExtension>("Product.GetFriendsDealProductGroupDetail", { groupId });
}

export function GetGroupBuyProductDetail(productUrl: string, groupbuyNo: string, purchaseSource: string): Promise<TProductExtension> {
	return webapi<TProductExtension>("Product.GetGroupBuyProductDetail", { productUrl, groupbuyNo, purchaseSource });
}

export function GetHotSearch(): Promise<string[]> {
	return webapi<string[]>("Product.GetHotSearch", {  });
}

export function GetPrimeProductDetail(productUrl: string, purchaseSource: string, userInfo: TProductUserInfo): Promise<TProductExtension> {
	return webapi<TProductExtension>("Product.GetPrimeProductDetail", { productUrl, purchaseSource, userInfo });
}

export function GetProductDetail(productUrl: string, purchaseSource: string): Promise<TProduct> {
	return webapi<TProduct>("Product.GetProductDetail", { productUrl, purchaseSource });
}

export function GetReviewCount(productUrl: string): Promise<TProductReviewCount> {
	return webapi<TProductReviewCount>("Product.GetReviewCount", { productUrl });
}

export function GetReviews(productUrl: string, hasPhoto: boolean, offset: number, limit: number): Promise<TProductReviewDetail[]> {
	return webapi<TProductReviewDetail[]>("Product.GetReviews", { productUrl, hasPhoto, offset, limit });
}

export function ListSearch(cond: TListSearchCond, offset: number, limit: number): Promise<SearchResult> {
	return webapi<SearchResult>("Product.ListSearch", { cond, offset, limit });
}

export function PrimeSearch(keyword: string, filters: SearchFilterCond[], sort: SearchSortCond, offset: number, limit: number): Promise<SearchResult> {
	return webapi<SearchResult>("Product.PrimeSearch", { keyword, filters, sort, offset, limit });
}

export function Search(keyword: string, filters: SearchFilterCond[], sort: SearchSortCond, offset: number, limit: number): Promise<SearchResult> {
	return webapi<SearchResult>("Product.Search", { keyword, filters, sort, offset, limit });
}

export function SearchByCategory(categoryId: number, filters: SearchFilterCond[], sort: SearchSortCond, offset: number, limit: number): Promise<SearchResult> {
	return webapi<SearchResult>("Product.SearchByCategory", { categoryId, filters, sort, offset, limit });
}

export function SearchByCategoryAndKeyword(categoryId: number, keyword: string, filters: SearchFilterCond[], sort: SearchSortCond, offset: number, limit: number): Promise<SearchResult> {
	return webapi<SearchResult>("Product.SearchByCategoryAndKeyword", { categoryId, keyword, filters, sort, offset, limit });
}

export function SearchByDomain(keyword: string, domain: string, filters: SearchFilterCond[], sort: SearchSortCond, offset: number, limit: number): Promise<SearchResult> {
	return webapi<SearchResult>("Product.SearchByDomain", { keyword, domain, filters, sort, offset, limit });
}

export function SearchByPrimeCategory(categoryId: number, filters: SearchFilterCond[], sort: SearchSortCond, offset: number, limit: number): Promise<SearchResult> {
	return webapi<SearchResult>("Product.SearchByPrimeCategory", { categoryId, filters, sort, offset, limit });
}

export function SearchByPrimeCategoryAndKeyword(categoryId: number, keyword: string, filters: SearchFilterCond[], sort: SearchSortCond, offset: number, limit: number): Promise<SearchResult> {
	return webapi<SearchResult>("Product.SearchByPrimeCategoryAndKeyword", { categoryId, keyword, filters, sort, offset, limit });
}

export function SearchBySeller(sellerId: number, keyword: string, filters: SearchFilterCond[], sort: SearchSortCond, offset: number, limit: number): Promise<SearchResult> {
	return webapi<SearchResult>("Product.SearchBySeller", { sellerId, keyword, filters, sort, offset, limit });
}

export function SetHelpful(productReviewDetailId: number, helpful: boolean): Promise<null> {
	return webapi<null>("Product.SetHelpful", { productReviewDetailId, helpful });
}



export default {
	GetFriendsDealProductDetail,
	GetFriendsDealProductGroupDetail,
	GetGroupBuyProductDetail,
	GetHotSearch,
	GetPrimeProductDetail,
	GetProductDetail,
	GetReviewCount,
	GetReviews,
	ListSearch,
	PrimeSearch,
	Search,
	SearchByCategory,
	SearchByCategoryAndKeyword,
	SearchByDomain,
	SearchByPrimeCategory,
	SearchByPrimeCategoryAndKeyword,
	SearchBySeller,
	SetHelpful,
};

