// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.5.0
// source: digger/prober.proto

package digger

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EastMoneyType int32

const (
	EastMoneyType_EastMoneyTypeUnknown    EastMoneyType = 0
	EastMoneyType_EastMoneyTypeHolder     EastMoneyType = 1 //股东持股
	EastMoneyType_EastMoneyTypeNews       EastMoneyType = 2 //
	EastMoneyType_EastMoneyTypeOperations EastMoneyType = 3 //操盘必读
	EastMoneyType_EastMoneyTypeGPList     EastMoneyType = 4 //股票列表
)

// Enum value maps for EastMoneyType.
var (
	EastMoneyType_name = map[int32]string{
		0: "EastMoneyTypeUnknown",
		1: "EastMoneyTypeHolder",
		2: "EastMoneyTypeNews",
		3: "EastMoneyTypeOperations",
		4: "EastMoneyTypeGPList",
	}
	EastMoneyType_value = map[string]int32{
		"EastMoneyTypeUnknown":    0,
		"EastMoneyTypeHolder":     1,
		"EastMoneyTypeNews":       2,
		"EastMoneyTypeOperations": 3,
		"EastMoneyTypeGPList":     4,
	}
)

func (x EastMoneyType) Enum() *EastMoneyType {
	p := new(EastMoneyType)
	*p = x
	return p
}

func (x EastMoneyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EastMoneyType) Descriptor() protoreflect.EnumDescriptor {
	return file_digger_prober_proto_enumTypes[0].Descriptor()
}

func (EastMoneyType) Type() protoreflect.EnumType {
	return &file_digger_prober_proto_enumTypes[0]
}

func (x EastMoneyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EastMoneyType.Descriptor instead.
func (EastMoneyType) EnumDescriptor() ([]byte, []int) {
	return file_digger_prober_proto_rawDescGZIP(), []int{0}
}

type RMType int32

const (
	RMType_RmTypeUnknown RMType = 0
	RMType_RmTypeShort   RMType = 1
	RMType_RmTypeLong    RMType = 2
)

// Enum value maps for RMType.
var (
	RMType_name = map[int32]string{
		0: "RmTypeUnknown",
		1: "RmTypeShort",
		2: "RmTypeLong",
	}
	RMType_value = map[string]int32{
		"RmTypeUnknown": 0,
		"RmTypeShort":   1,
		"RmTypeLong":    2,
	}
)

func (x RMType) Enum() *RMType {
	p := new(RMType)
	*p = x
	return p
}

func (x RMType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RMType) Descriptor() protoreflect.EnumDescriptor {
	return file_digger_prober_proto_enumTypes[1].Descriptor()
}

func (RMType) Type() protoreflect.EnumType {
	return &file_digger_prober_proto_enumTypes[1]
}

func (x RMType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RMType.Descriptor instead.
func (RMType) EnumDescriptor() ([]byte, []int) {
	return file_digger_prober_proto_rawDescGZIP(), []int{1}
}

//1准备,2开始, 3进行中,4结束,5放弃
type RMState int32

const (
	RMState_RMStateUnknown   RMState = 0
	RMState_RMStatePrepared  RMState = 1 //准备
	RMState_RMStateStarted   RMState = 2 //开始
	RMState_RMStateFirst     RMState = 3 //第一阶段
	RMState_RMStateSecond    RMState = 4 //第二阶段
	RMState_RMStateThird     RMState = 5 //第三阶段
	RMState_RMStateOver      RMState = 6 //结束
	RMState_RMStateAbandoned RMState = 7 //放弃
)

// Enum value maps for RMState.
var (
	RMState_name = map[int32]string{
		0: "RMStateUnknown",
		1: "RMStatePrepared",
		2: "RMStateStarted",
		3: "RMStateFirst",
		4: "RMStateSecond",
		5: "RMStateThird",
		6: "RMStateOver",
		7: "RMStateAbandoned",
	}
	RMState_value = map[string]int32{
		"RMStateUnknown":   0,
		"RMStatePrepared":  1,
		"RMStateStarted":   2,
		"RMStateFirst":     3,
		"RMStateSecond":    4,
		"RMStateThird":     5,
		"RMStateOver":      6,
		"RMStateAbandoned": 7,
	}
)

func (x RMState) Enum() *RMState {
	p := new(RMState)
	*p = x
	return p
}

func (x RMState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RMState) Descriptor() protoreflect.EnumDescriptor {
	return file_digger_prober_proto_enumTypes[2].Descriptor()
}

func (RMState) Type() protoreflect.EnumType {
	return &file_digger_prober_proto_enumTypes[2]
}

func (x RMState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RMState.Descriptor instead.
func (RMState) EnumDescriptor() ([]byte, []int) {
	return file_digger_prober_proto_rawDescGZIP(), []int{2}
}

type FunctionType int32

const (
	FunctionType_FunctionTypeUnknown     FunctionType = 0
	FunctionType_FunctionTypeCodeList    FunctionType = 1
	FunctionType_FunctionTypeShareholder FunctionType = 2
	FunctionType_FunctionTypeLongLine    FunctionType = 3
	FunctionType_FunctionTypeShortLine   FunctionType = 4
	FunctionType_FunctionTypeRecommend   FunctionType = 5
	FunctionType_FunctionTypeFundFlow    FunctionType = 6  //资金流入
	FunctionType_FunctionTypeFocus       FunctionType = 10 //关注
	FunctionType_FunctionTypeZhouQi      FunctionType = 11 //
)

// Enum value maps for FunctionType.
var (
	FunctionType_name = map[int32]string{
		0:  "FunctionTypeUnknown",
		1:  "FunctionTypeCodeList",
		2:  "FunctionTypeShareholder",
		3:  "FunctionTypeLongLine",
		4:  "FunctionTypeShortLine",
		5:  "FunctionTypeRecommend",
		6:  "FunctionTypeFundFlow",
		10: "FunctionTypeFocus",
		11: "FunctionTypeZhouQi",
	}
	FunctionType_value = map[string]int32{
		"FunctionTypeUnknown":     0,
		"FunctionTypeCodeList":    1,
		"FunctionTypeShareholder": 2,
		"FunctionTypeLongLine":    3,
		"FunctionTypeShortLine":   4,
		"FunctionTypeRecommend":   5,
		"FunctionTypeFundFlow":    6,
		"FunctionTypeFocus":       10,
		"FunctionTypeZhouQi":      11,
	}
)

func (x FunctionType) Enum() *FunctionType {
	p := new(FunctionType)
	*p = x
	return p
}

func (x FunctionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FunctionType) Descriptor() protoreflect.EnumDescriptor {
	return file_digger_prober_proto_enumTypes[3].Descriptor()
}

func (FunctionType) Type() protoreflect.EnumType {
	return &file_digger_prober_proto_enumTypes[3]
}

func (x FunctionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FunctionType.Descriptor instead.
func (FunctionType) EnumDescriptor() ([]byte, []int) {
	return file_digger_prober_proto_rawDescGZIP(), []int{3}
}

//权重单元
type WeightUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`            //权重值
	Accum       float64 `protobuf:"fixed64,2,opt,name=accum,proto3" json:"accum,omitempty"`            //连续累加值
	Consecutive int32   `protobuf:"varint,3,opt,name=consecutive,proto3" json:"consecutive,omitempty"` //连续计数
	Counter     int32   `protobuf:"varint,4,opt,name=counter,proto3" json:"counter,omitempty"`         //计数器
	Present     float64 `protobuf:"fixed64,5,opt,name=present,proto3" json:"present,omitempty"`        //现在的
	SubNew      bool    `protobuf:"varint,6,opt,name=subNew,proto3" json:"subNew,omitempty"`           //次新
	Indexes     []int32 `protobuf:"varint,7,rep,packed,name=indexes,proto3" json:"indexes,omitempty"`  //索引值
}

func (x *WeightUnit) Reset() {
	*x = WeightUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digger_prober_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightUnit) ProtoMessage() {}

func (x *WeightUnit) ProtoReflect() protoreflect.Message {
	mi := &file_digger_prober_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightUnit.ProtoReflect.Descriptor instead.
func (*WeightUnit) Descriptor() ([]byte, []int) {
	return file_digger_prober_proto_rawDescGZIP(), []int{0}
}

func (x *WeightUnit) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *WeightUnit) GetAccum() float64 {
	if x != nil {
		return x.Accum
	}
	return 0
}

func (x *WeightUnit) GetConsecutive() int32 {
	if x != nil {
		return x.Consecutive
	}
	return 0
}

func (x *WeightUnit) GetCounter() int32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *WeightUnit) GetPresent() float64 {
	if x != nil {
		return x.Present
	}
	return 0
}

func (x *WeightUnit) GetSubNew() bool {
	if x != nil {
		return x.SubNew
	}
	return false
}

func (x *WeightUnit) GetIndexes() []int32 {
	if x != nil {
		return x.Indexes
	}
	return nil
}

// 权重规则
type WeightRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNew              bool        `protobuf:"varint,1,opt,name=isNew,proto3" json:"isNew,omitempty"`
	Price              *WeightUnit `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	Focus              *WeightUnit `protobuf:"bytes,3,opt,name=focus,proto3" json:"focus,omitempty"`
	TotalNumRatio      *WeightUnit `protobuf:"bytes,4,opt,name=totalNumRatio,proto3" json:"totalNumRatio,omitempty"`
	AvgFreesharesRatio *WeightUnit `protobuf:"bytes,5,opt,name=avgFreesharesRatio,proto3" json:"avgFreesharesRatio,omitempty"`
	HoldRatioTotal     float64     `protobuf:"fixed64,6,opt,name=holdRatioTotal,proto3" json:"holdRatioTotal,omitempty"`
	FreeholdRatioTotal float64     `protobuf:"fixed64,7,opt,name=freeholdRatioTotal,proto3" json:"freeholdRatioTotal,omitempty"`
}

func (x *WeightRule) Reset() {
	*x = WeightRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digger_prober_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightRule) ProtoMessage() {}

func (x *WeightRule) ProtoReflect() protoreflect.Message {
	mi := &file_digger_prober_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightRule.ProtoReflect.Descriptor instead.
func (*WeightRule) Descriptor() ([]byte, []int) {
	return file_digger_prober_proto_rawDescGZIP(), []int{1}
}

func (x *WeightRule) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *WeightRule) GetPrice() *WeightUnit {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *WeightRule) GetFocus() *WeightUnit {
	if x != nil {
		return x.Focus
	}
	return nil
}

func (x *WeightRule) GetTotalNumRatio() *WeightUnit {
	if x != nil {
		return x.TotalNumRatio
	}
	return nil
}

func (x *WeightRule) GetAvgFreesharesRatio() *WeightUnit {
	if x != nil {
		return x.AvgFreesharesRatio
	}
	return nil
}

func (x *WeightRule) GetHoldRatioTotal() float64 {
	if x != nil {
		return x.HoldRatioTotal
	}
	return 0
}

func (x *WeightRule) GetFreeholdRatioTotal() float64 {
	if x != nil {
		return x.FreeholdRatioTotal
	}
	return 0
}

type PresentPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price     float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Timestamp int64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PresentPrice) Reset() {
	*x = PresentPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_digger_prober_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresentPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresentPrice) ProtoMessage() {}

func (x *PresentPrice) ProtoReflect() protoreflect.Message {
	mi := &file_digger_prober_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresentPrice.ProtoReflect.Descriptor instead.
func (*PresentPrice) Descriptor() ([]byte, []int) {
	return file_digger_prober_proto_rawDescGZIP(), []int{2}
}

func (x *PresentPrice) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PresentPrice) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_digger_prober_proto protoreflect.FileDescriptor

var file_digger_prober_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x64, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xc0, 0x01,
	0x0a, 0x0a, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x75, 0x62, 0x4e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x75, 0x62, 0x4e, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x22, 0xcc, 0x02, 0x0a, 0x0a, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x05, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x42, 0x0a, 0x12, 0x61, 0x76, 0x67, 0x46, 0x72, 0x65, 0x65, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x64, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x12, 0x61, 0x76, 0x67, 0x46, 0x72, 0x65, 0x65, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2e, 0x0a, 0x12, 0x66, 0x72, 0x65, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x66, 0x72, 0x65,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x42, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2a, 0x8f, 0x01, 0x0a, 0x0d, 0x45, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x77, 0x73, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x10, 0x04, 0x2a, 0x3c, 0x0a, 0x06, 0x52, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x6e,
	0x67, 0x10, 0x02, 0x2a, 0xa4, 0x01, 0x0a, 0x07, 0x52, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41,
	0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x07, 0x2a, 0xf7, 0x01, 0x0a, 0x0c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x4c,
	0x69, 0x6e, 0x65, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5a, 0x68, 0x6f, 0x75,
	0x51, 0x69, 0x10, 0x0b, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x64, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_digger_prober_proto_rawDescOnce sync.Once
	file_digger_prober_proto_rawDescData = file_digger_prober_proto_rawDesc
)

func file_digger_prober_proto_rawDescGZIP() []byte {
	file_digger_prober_proto_rawDescOnce.Do(func() {
		file_digger_prober_proto_rawDescData = protoimpl.X.CompressGZIP(file_digger_prober_proto_rawDescData)
	})
	return file_digger_prober_proto_rawDescData
}

var file_digger_prober_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_digger_prober_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_digger_prober_proto_goTypes = []interface{}{
	(EastMoneyType)(0),   // 0: digger.EastMoneyType
	(RMType)(0),          // 1: digger.RMType
	(RMState)(0),         // 2: digger.RMState
	(FunctionType)(0),    // 3: digger.FunctionType
	(*WeightUnit)(nil),   // 4: digger.WeightUnit
	(*WeightRule)(nil),   // 5: digger.WeightRule
	(*PresentPrice)(nil), // 6: digger.PresentPrice
}
var file_digger_prober_proto_depIdxs = []int32{
	4, // 0: digger.WeightRule.price:type_name -> digger.WeightUnit
	4, // 1: digger.WeightRule.focus:type_name -> digger.WeightUnit
	4, // 2: digger.WeightRule.totalNumRatio:type_name -> digger.WeightUnit
	4, // 3: digger.WeightRule.avgFreesharesRatio:type_name -> digger.WeightUnit
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_digger_prober_proto_init() }
func file_digger_prober_proto_init() {
	if File_digger_prober_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_digger_prober_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digger_prober_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_digger_prober_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresentPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_digger_prober_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_digger_prober_proto_goTypes,
		DependencyIndexes: file_digger_prober_proto_depIdxs,
		EnumInfos:         file_digger_prober_proto_enumTypes,
		MessageInfos:      file_digger_prober_proto_msgTypes,
	}.Build()
	File_digger_prober_proto = out.File
	file_digger_prober_proto_rawDesc = nil
	file_digger_prober_proto_goTypes = nil
	file_digger_prober_proto_depIdxs = nil
}
